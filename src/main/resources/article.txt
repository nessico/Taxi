public class FileUtils
extends Object
General file manipulation utilities.
Facilities are provided in the following areas:

writing to a file
reading from a file
make a directory including parent directories
copying files and directories
deleting files and directories
converting to and from a URL
listing files and directories by filter and extension
comparing file content
file last changed date
calculating a checksum
Note that a specific charset should be specified whenever possible. Relying on the platform default means that the code is Locale-dependent. Only use the default if the files are known to always use the platform default.

Origin of code: Excalibur, Alexandria, Commons-Utils

Field Summary
Fields
Modifier and Type	Field and Description
static File[]	EMPTY_FILE_ARRAY
An empty array of type File.
static long	ONE_EB
The number of bytes in an exabyte.
static BigInteger	ONE_EB_BI
The number of bytes in an exabyte.
static long	ONE_GB
The number of bytes in a gigabyte.
static BigInteger	ONE_GB_BI
The number of bytes in a gigabyte.
static long	ONE_KB
The number of bytes in a kilobyte.
static BigInteger	ONE_KB_BI
The number of bytes in a kilobyte.
static long	ONE_MB
The number of bytes in a megabyte.
static BigInteger	ONE_MB_BI
The number of bytes in a megabyte.
static long	ONE_PB
The number of bytes in a petabyte.
static BigInteger	ONE_PB_BI
The number of bytes in a petabyte.
static long	ONE_TB
The number of bytes in a terabyte.
static BigInteger	ONE_TB_BI
The number of bytes in a terabyte.
static BigInteger	ONE_YB
The number of bytes in a yottabyte.
static BigInteger	ONE_ZB
The number of bytes in a zettabyte.
Constructor Summary
Constructors
Constructor and Description
FileUtils()
Instances should NOT be constructed in standard programming.
Method Summary
All MethodsStatic MethodsConcrete MethodsDeprecated Methods
Modifier and Type	Method and Description
static String	byteCountToDisplaySize(BigInteger size)
Returns a human-readable version of the file size, where the input represents a specific number of bytes.
static String	byteCountToDisplaySize(long size)
Returns a human-readable version of the file size, where the input represents a specific number of bytes.
static Checksum	checksum(File file, Checksum checksum)
Computes the checksum of a file using the specified checksum object.
static long	checksumCRC32(File file)
Computes the checksum of a file using the CRC32 checksum routine.
static void	cleanDirectory(File directory)
Cleans a directory without deleting it.
static boolean	contentEquals(File file1, File file2)
Compares the contents of two files to determine if they are equal or not.
static boolean	contentEqualsIgnoreEOL(File file1, File file2, String charsetName)
Compares the contents of two files to determine if they are equal or not.
static File[]	convertFileCollectionToFileArray(Collection<File> files)
Converts a Collection containing java.io.File instanced into array representation.
static void	copyDirectory(File srcDir, File destDir)
Copies a whole directory to a new location preserving the file dates.
static void	copyDirectory(File srcDir, File destDir, boolean preserveFileDate)
Copies a whole directory to a new location.
static void	copyDirectory(File srcDir, File destDir, FileFilter filter)
Copies a filtered directory to a new location preserving the file dates.
static void	copyDirectory(File srcDir, File destDir, FileFilter filter, boolean preserveFileDate)
Copies a filtered directory to a new location.
static void	copyDirectoryToDirectory(File sourceDir, File destinationDir)
Copies a directory to within another directory preserving the file dates.
static void	copyFile(File srcFile, File destFile)
Copies a file to a new location preserving the file date.
static void	copyFile(File srcFile, File destFile, boolean preserveFileDate)
Copies a file to a new location.
static long	copyFile(File input, OutputStream output)
Copy bytes from a File to an OutputStream.
static void	copyFileToDirectory(File srcFile, File destDir)
Copies a file to a directory preserving the file date.
static void	copyFileToDirectory(File sourceFile, File destinationDir, boolean preserveFileDate)
Copies a file to a directory optionally preserving the file date.
static void	copyInputStreamToFile(InputStream source, File destination)
Copies bytes from an InputStream source to a file destination.
static void	copyToDirectory(File sourceFile, File destinationDir)
Copies a file or directory to within another directory preserving the file dates.
static void	copyToDirectory(Iterable<File> sourceIterable, File destinationDir)
Copies a files to a directory preserving each file's date.
static void	copyToFile(InputStream source, File destination)
Copies bytes from an InputStream source to a file destination.
static void	copyURLToFile(URL source, File destination)
Copies bytes from the URL source to a file destination.
static void	copyURLToFile(URL source, File destination, int connectionTimeout, int readTimeout)
Copies bytes from the URL source to a file destination.
static void	deleteDirectory(File directory)
Deletes a directory recursively.
static boolean	deleteQuietly(File file)
Deletes a file, never throwing an exception.
static boolean	directoryContains(File directory, File child)
Determines whether the parent directory contains the child element (a file or directory).
static void	forceDelete(File file)
Deletes a file.
static void	forceDeleteOnExit(File file)
Schedules a file to be deleted when JVM exits.
static void	forceMkdir(File directory)
Makes a directory, including any necessary but nonexistent parent directories.
static void	forceMkdirParent(File file)
Makes any necessary but nonexistent parent directories for a given File.
static File	getFile(File directory, String... names)
Construct a file from the set of name elements.
static File	getFile(String... names)
Construct a file from the set of name elements.
static File	getTempDirectory()
Returns a File representing the system temporary directory.
static String	getTempDirectoryPath()
Returns the path to the system temporary directory.
static File	getUserDirectory()
Returns a File representing the user's home directory.
static String	getUserDirectoryPath()
Returns the path to the user's home directory.
static boolean	isFileNewer(File file, Date date)
Tests if the specified File is newer than the specified Date.
static boolean	isFileNewer(File file, File reference)
Tests if the specified File is newer than the reference File.
static boolean	isFileNewer(File file, long timeMillis)
Tests if the specified File is newer than the specified time reference.
static boolean	isFileOlder(File file, Date date)
Tests if the specified File is older than the specified Date.
static boolean	isFileOlder(File file, File reference)
Tests if the specified File is older than the reference File.
static boolean	isFileOlder(File file, long timeMillis)
Tests if the specified File is older than the specified time reference.
static boolean	isSymlink(File file)
Determines whether the specified file is a Symbolic Link rather than an actual file.
static Iterator<File>	iterateFiles(File directory, IOFileFilter fileFilter, IOFileFilter dirFilter)
Allows iteration over the files in given directory (and optionally its subdirectories).
static Iterator<File>	iterateFiles(File directory, String[] extensions, boolean recursive)
Allows iteration over the files in a given directory (and optionally its subdirectories) which match an array of extensions.
static Iterator<File>	iterateFilesAndDirs(File directory, IOFileFilter fileFilter, IOFileFilter dirFilter)
Allows iteration over the files in given directory (and optionally its subdirectories).
static LineIterator	lineIterator(File file)
Returns an Iterator for the lines in a File using the default encoding for the VM.
static LineIterator	lineIterator(File file, String charsetName)
Returns an Iterator for the lines in a File.
static Collection<File>	listFiles(File directory, IOFileFilter fileFilter, IOFileFilter dirFilter)
Finds files within a given directory (and optionally its subdirectories).
static Collection<File>	listFiles(File directory, String[] extensions, boolean recursive)
Finds files within a given directory (and optionally its subdirectories) which match an array of extensions.
static Collection<File>	listFilesAndDirs(File directory, IOFileFilter fileFilter, IOFileFilter dirFilter)
Finds files within a given directory (and optionally its subdirectories).
static void	moveDirectory(File srcDir, File destDir)
Moves a directory.
static void	moveDirectoryToDirectory(File src, File destDir, boolean createDestDir)
Moves a directory to another directory.
static void	moveFile(File srcFile, File destFile)
Moves a file.
static void	moveFileToDirectory(File srcFile, File destDir, boolean createDestDir)
Moves a file to a directory.
static void	moveToDirectory(File src, File destDir, boolean createDestDir)
Moves a file or directory to the destination directory.
static FileInputStream	openInputStream(File file)
Opens a FileInputStream for the specified file, providing better error messages than simply calling new FileInputStream(file).
static FileOutputStream	openOutputStream(File file)
Opens a FileOutputStream for the specified file, checking and creating the parent directory if it does not exist.
static FileOutputStream	openOutputStream(File file, boolean append)
Opens a FileOutputStream for the specified file, checking and creating the parent directory if it does not exist.
static byte[]	readFileToByteArray(File file)
Reads the contents of a file into a byte array.
static String	readFileToString(File file)
Deprecated.
2.5 use readFileToString(File, Charset) instead (and specify the appropriate encoding)
static String	readFileToString(File file, Charset charsetName)
Reads the contents of a file into a String.
static String	readFileToString(File file, String charsetName)
Reads the contents of a file into a String.
static List<String>	readLines(File file)
Deprecated.
2.5 use readLines(File, Charset) instead (and specify the appropriate encoding)
static List<String>	readLines(File file, Charset charset)
Reads the contents of a file line by line to a List of Strings.
static List<String>	readLines(File file, String charsetName)
Reads the contents of a file line by line to a List of Strings.
static long	sizeOf(File file)
Returns the size of the specified file or directory.
static BigInteger	sizeOfAsBigInteger(File file)
Returns the size of the specified file or directory.
static long	sizeOfDirectory(File directory)
Counts the size of a directory recursively (sum of the length of all files).
static BigInteger	sizeOfDirectoryAsBigInteger(File directory)
Counts the size of a directory recursively (sum of the length of all files).
static File	toFile(URL url)
Convert from a URL to a File.
static File[]	toFiles(URL... urls)
Converts each of an array of URL to a File.
static void	touch(File file)
Implements the same behavior as the "touch" utility on Unix.
static URL[]	toURLs(File... files)
Converts each of an array of File to a URL.
static boolean	waitFor(File file, int seconds)
Waits for NFS to propagate a file creation, imposing a timeout.
static void	write(File file, CharSequence data)
Deprecated.
2.5 use write(File, CharSequence, Charset) instead (and specify the appropriate encoding)
static void	write(File file, CharSequence data, boolean append)
Deprecated.
2.5 use write(File, CharSequence, Charset, boolean) instead (and specify the appropriate encoding)
static void	write(File file, CharSequence data, Charset charset)
Writes a CharSequence to a file creating the file if it does not exist.
static void	write(File file, CharSequence data, Charset charset, boolean append)
Writes a CharSequence to a file creating the file if it does not exist.
static void	write(File file, CharSequence data, String charsetName)
Writes a CharSequence to a file creating the file if it does not exist.
static void	write(File file, CharSequence data, String charsetName, boolean append)
Writes a CharSequence to a file creating the file if it does not exist.
static void	writeByteArrayToFile(File file, byte[] data)
Writes a byte array to a file creating the file if it does not exist.
static void	writeByteArrayToFile(File file, byte[] data, boolean append)
Writes a byte array to a file creating the file if it does not exist.
static void	writeByteArrayToFile(File file, byte[] data, int off, int len)
Writes len bytes from the specified byte array starting at offset off to a file, creating the file if it does not exist.
static void	writeByteArrayToFile(File file, byte[] data, int off, int len, boolean append)
Writes len bytes from the specified byte array starting at offset off to a file, creating the file if it does not exist.
static void	writeLines(File file, Collection<?> lines)
Writes the toString() value of each item in a collection to the specified File line by line.
static void	writeLines(File file, Collection<?> lines, boolean append)
Writes the toString() value of each item in a collection to the specified File line by line.
static void	writeLines(File file, Collection<?> lines, String lineEnding)
Writes the toString() value of each item in a collection to the specified File line by line.
static void	writeLines(File file, Collection<?> lines, String lineEnding, boolean append)
Writes the toString() value of each item in a collection to the specified File line by line.
static void	writeLines(File file, String charsetName, Collection<?> lines)
Writes the toString() value of each item in a collection to the specified File line by line.
static void	writeLines(File file, String charsetName, Collection<?> lines, boolean append)
Writes the toString() value of each item in a collection to the specified File line by line, optionally appending.
static void	writeLines(File file, String charsetName, Collection<?> lines, String lineEnding)
Writes the toString() value of each item in a collection to the specified File line by line.
static void	writeLines(File file, String charsetName, Collection<?> lines, String lineEnding, boolean append)
Writes the toString() value of each item in a collection to the specified File line by line.
static void	writeStringToFile(File file, String data)
Deprecated.
2.5 use writeStringToFile(File, String, Charset) instead (and specify the appropriate encoding)
static void	writeStringToFile(File file, String data, boolean append)
Deprecated.
2.5 use writeStringToFile(File, String, Charset, boolean) instead (and specify the appropriate encoding)
static void	writeStringToFile(File file, String data, Charset charset)
Writes a String to a file creating the file if it does not exist.
static void	writeStringToFile(File file, String data, Charset charset, boolean append)
Writes a String to a file creating the file if it does not exist.
static void	writeStringToFile(File file, String data, String charsetName)
Writes a String to a file creating the file if it does not exist.
static void	writeStringToFile(File file, String data, String charsetName, boolean append)
Writes a String to a file creating the file if it does not exist.
Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Field Detail
ONE_KB
public static final long ONE_KB
The number of bytes in a kilobyte.
See Also:
Constant Field Values
ONE_KB_BI
public static final BigInteger ONE_KB_BI
The number of bytes in a kilobyte.
Since:
2.4
ONE_MB
public static final long ONE_MB
The number of bytes in a megabyte.
See Also:
Constant Field Values
ONE_MB_BI
public static final BigInteger ONE_MB_BI
The number of bytes in a megabyte.
Since:
2.4
ONE_GB
public static final long ONE_GB
The number of bytes in a gigabyte.
See Also:
Constant Field Values
ONE_GB_BI
public static final BigInteger ONE_GB_BI
The number of bytes in a gigabyte.
Since:
2.4
ONE_TB
public static final long ONE_TB
The number of bytes in a terabyte.
See Also:
Constant Field Values
ONE_TB_BI
public static final BigInteger ONE_TB_BI
The number of bytes in a terabyte.
Since:
2.4
ONE_PB
public static final long ONE_PB
The number of bytes in a petabyte.
See Also:
Constant Field Values
ONE_PB_BI
public static final BigInteger ONE_PB_BI
The number of bytes in a petabyte.
Since:
2.4
ONE_EB
public static final long ONE_EB
The number of bytes in an exabyte.
See Also:
Constant Field Values
ONE_EB_BI
public static final BigInteger ONE_EB_BI
The number of bytes in an exabyte.
Since:
2.4
ONE_ZB
public static final BigInteger ONE_ZB
The number of bytes in a zettabyte.
ONE_YB
public static final BigInteger ONE_YB
The number of bytes in a yottabyte.
EMPTY_FILE_ARRAY
public static final File[] EMPTY_FILE_ARRAY
An empty array of type File.
Constructor Detail
FileUtils
public FileUtils()
Instances should NOT be constructed in standard programming.
Method Detail
byteCountToDisplaySize
public static String byteCountToDisplaySize(BigInteger size)
Returns a human-readable version of the file size, where the input represents a specific number of bytes.
If the size is over 1GB, the size is returned as the number of whole GB, i.e. the size is rounded down to the nearest GB boundary.

Similarly for the 1MB and 1KB boundaries.

Parameters:
size - the number of bytes
Returns:
a human-readable display value (includes units - EB, PB, TB, GB, MB, KB or bytes)
Since:
2.4
See Also:
IO-226 - should the rounding be changed?
byteCountToDisplaySize
public static String byteCountToDisplaySize(long size)
Returns a human-readable version of the file size, where the input represents a specific number of bytes.
If the size is over 1GB, the size is returned as the number of whole GB, i.e. the size is rounded down to the nearest GB boundary.

Similarly for the 1MB and 1KB boundaries.

Parameters:
size - the number of bytes
Returns:
a human-readable display value (includes units - EB, PB, TB, GB, MB, KB or bytes)
See Also:
IO-226 - should the rounding be changed?
checksum
public static Checksum checksum(File file,
                                Checksum checksum)
                         throws IOException
Computes the checksum of a file using the specified checksum object. Multiple files may be checked using one Checksum instance if desired simply by reusing the same checksum object. For example:
   long csum = FileUtils.checksum(file, new CRC32()).getValue();

Parameters:
file - the file to checksum, must not be null
checksum - the checksum object to be used, must not be null
Returns:
the checksum specified, updated with the content of the file
Throws:
NullPointerException - if the file or checksum is null
IllegalArgumentException - if the file is a directory
IOException - if an IO error occurs reading the file
Since:
1.3
checksumCRC32
public static long checksumCRC32(File file)
                          throws IOException
Computes the checksum of a file using the CRC32 checksum routine. The value of the checksum is returned.
Parameters:
file - the file to checksum, must not be null
Returns:
the checksum value
Throws:
NullPointerException - if the file or checksum is null
IllegalArgumentException - if the file is a directory
IOException - if an IO error occurs reading the file
Since:
1.3
cleanDirectory
public static void cleanDirectory(File directory)
                           throws IOException
Cleans a directory without deleting it.
Parameters:
directory - directory to clean
Throws:
IOException - in case cleaning is unsuccessful
IllegalArgumentException - if directory does not exist or is not a directory
contentEquals
public static boolean contentEquals(File file1,
                                    File file2)
                             throws IOException
Compares the contents of two files to determine if they are equal or not.
This method checks to see if the two files are different lengths or if they point to the same file, before resorting to byte-by-byte comparison of the contents.

Code origin: Avalon

Parameters:
file1 - the first file
file2 - the second file
Returns:
true if the content of the files are equal or they both don't exist, false otherwise
Throws:
IOException - in case of an I/O error
See Also:
PathUtils.fileContentEquals(Path,Path,java.nio.file.LinkOption[],java.nio.file.OpenOption...)
contentEqualsIgnoreEOL
public static boolean contentEqualsIgnoreEOL(File file1,
                                             File file2,
                                             String charsetName)
                                      throws IOException
Compares the contents of two files to determine if they are equal or not.
This method checks to see if the two files point to the same file, before resorting to line-by-line comparison of the contents.

Parameters:
file1 - the first file
file2 - the second file
charsetName - the name of the requested charset. May be null, in which case the platform default is used
Returns:
true if the content of the files are equal or neither exists, false otherwise
Throws:
IOException - in case of an I/O error
Since:
2.2
See Also:
IOUtils.contentEqualsIgnoreEOL(Reader, Reader)
convertFileCollectionToFileArray
public static File[] convertFileCollectionToFileArray(Collection<File> files)
Converts a Collection containing java.io.File instanced into array representation. This is to account for the difference between File.listFiles() and FileUtils.listFiles().
Parameters:
files - a Collection containing java.io.File instances
Returns:
an array of java.io.File
copyDirectory
public static void copyDirectory(File srcDir,
                                 File destDir)
                          throws IOException
Copies a whole directory to a new location preserving the file dates.
This method copies the specified directory and all its child directories and files to the specified destination. The destination is the new location and name of the directory.

The destination directory is created if it does not exist. If the destination directory did exist, then this method merges the source with the destination, with the source taking precedence.

Note: This method tries to preserve the files' last modified date/times using File.setLastModified(long), however it is not guaranteed that those operations will succeed. If the modification operation fails, no indication is provided.

Parameters:
srcDir - an existing directory to copy, must not be null
destDir - the new directory, must not be null
Throws:
NullPointerException - if source or destination is null
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
Since:
1.1
copyDirectory
public static void copyDirectory(File srcDir,
                                 File destDir,
                                 boolean preserveFileDate)
                          throws IOException
Copies a whole directory to a new location.
This method copies the contents of the specified source directory to within the specified destination directory.

The destination directory is created if it does not exist. If the destination directory did exist, then this method merges the source with the destination, with the source taking precedence.

Note: Setting preserveFileDate to true tries to preserve the files' last modified date/times using File.setLastModified(long), however it is not guaranteed that those operations will succeed. If the modification operation fails, no indication is provided.

Parameters:
srcDir - an existing directory to copy, must not be null
destDir - the new directory, must not be null
preserveFileDate - true if the file date of the copy should be the same as the original
Throws:
NullPointerException - if source or destination is null
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
Since:
1.1
copyDirectory
public static void copyDirectory(File srcDir,
                                 File destDir,
                                 FileFilter filter)
                          throws IOException
Copies a filtered directory to a new location preserving the file dates.
This method copies the contents of the specified source directory to within the specified destination directory.

The destination directory is created if it does not exist. If the destination directory did exist, then this method merges the source with the destination, with the source taking precedence.

Note: This method tries to preserve the files' last modified date/times using File.setLastModified(long), however it is not guaranteed that those operations will succeed. If the modification operation fails, no indication is provided.

Example: Copy directories only
  // only copy the directory structure
  FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY);

Example: Copy directories and txt files
  // Create a filter for ".txt" files
  IOFileFilter txtSuffixFilter = FileFilterUtils.suffixFileFilter(".txt");
  IOFileFilter txtFiles = FileFilterUtils.andFileFilter(FileFileFilter.FILE, txtSuffixFilter);

  // Create a filter for either directories or ".txt" files
  FileFilter filter = FileFilterUtils.orFileFilter(DirectoryFileFilter.DIRECTORY, txtFiles);

  // Copy using the filter
  FileUtils.copyDirectory(srcDir, destDir, filter);

Parameters:
srcDir - an existing directory to copy, must not be null
destDir - the new directory, must not be null
filter - the filter to apply, null means copy all directories and files should be the same as the original
Throws:
NullPointerException - if source or destination is null
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
Since:
1.4
copyDirectory
public static void copyDirectory(File srcDir,
                                 File destDir,
                                 FileFilter filter,
                                 boolean preserveFileDate)
                          throws IOException
Copies a filtered directory to a new location.
This method copies the contents of the specified source directory to within the specified destination directory.

The destination directory is created if it does not exist. If the destination directory did exist, then this method merges the source with the destination, with the source taking precedence.

Note: Setting preserveFileDate to true tries to preserve the files' last modified date/times using File.setLastModified(long), however it is not guaranteed that those operations will succeed. If the modification operation fails, no indication is provided.

Example: Copy directories only
  // only copy the directory structure
  FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY, false);

Example: Copy directories and txt files
  // Create a filter for ".txt" files
  IOFileFilter txtSuffixFilter = FileFilterUtils.suffixFileFilter(".txt");
  IOFileFilter txtFiles = FileFilterUtils.andFileFilter(FileFileFilter.FILE, txtSuffixFilter);

  // Create a filter for either directories or ".txt" files
  FileFilter filter = FileFilterUtils.orFileFilter(DirectoryFileFilter.DIRECTORY, txtFiles);

  // Copy using the filter
  FileUtils.copyDirectory(srcDir, destDir, filter, false);

Parameters:
srcDir - an existing directory to copy, must not be null
destDir - the new directory, must not be null
filter - the filter to apply, null means copy all directories and files
preserveFileDate - true if the file date of the copy should be the same as the original
Throws:
NullPointerException - if source or destination is null
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
Since:
1.4
copyDirectoryToDirectory
public static void copyDirectoryToDirectory(File sourceDir,
                                            File destinationDir)
                                     throws IOException
Copies a directory to within another directory preserving the file dates.
This method copies the source directory and all its contents to a directory of the same name in the specified destination directory.

The destination directory is created if it does not exist. If the destination directory did exist, then this method merges the source with the destination, with the source taking precedence.

Note: This method tries to preserve the files' last modified date/times using File.setLastModified(long), however it is not guaranteed that those operations will succeed. If the modification operation fails, no indication is provided.

Parameters:
sourceDir - an existing directory to copy, must not be null
destinationDir - the directory to place the copy in, must not be null
Throws:
NullPointerException - if source or destination is null
IllegalArgumentException - if srcDir or destDir is not a directory
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
Since:
1.2
copyFile
public static void copyFile(File srcFile,
                            File destFile)
                     throws IOException
Copies a file to a new location preserving the file date.
This method copies the contents of the specified source file to the specified destination file. The directory holding the destination file is created if it does not exist. If the destination file exists, then this method will overwrite it.

Note: This method tries to preserve the file's last modified date/times using File.setLastModified(long), however it is not guaranteed that the operation will succeed. If the modification operation fails, no indication is provided.

Parameters:
srcFile - an existing file to copy, must not be null
destFile - the new file, must not be null
Throws:
NullPointerException - if source or destination is null
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
IOException - if the output file length is not the same as the input file length after the copy completes
See Also:
copyFileToDirectory(File, File), copyFile(File, File, boolean)
copyFile
public static void copyFile(File srcFile,
                            File destFile,
                            boolean preserveFileDate)
                     throws IOException
Copies a file to a new location.
This method copies the contents of the specified source file to the specified destination file. The directory holding the destination file is created if it does not exist. If the destination file exists, then this method will overwrite it.

Note: Setting preserveFileDate to true tries to preserve the file's last modified date/times using File.setLastModified(long), however it is not guaranteed that the operation will succeed. If the modification operation fails, no indication is provided.

Parameters:
srcFile - an existing file to copy, must not be null
destFile - the new file, must not be null
preserveFileDate - true if the file date of the copy should be the same as the original
Throws:
NullPointerException - if source or destination is null
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
IOException - if the output file length is not the same as the input file length after the copy completes
See Also:
copyFileToDirectory(File, File, boolean), doCopyFile(File, File, boolean)
copyFile
public static long copyFile(File input,
                            OutputStream output)
                     throws IOException
Copy bytes from a File to an OutputStream.
This method buffers the input internally, so there is no need to use a BufferedInputStream.

Parameters:
input - the File to read from
output - the OutputStream to write to
Returns:
the number of bytes copied
Throws:
NullPointerException - if the input or output is null
IOException - if an I/O error occurs
Since:
2.1
copyFileToDirectory
public static void copyFileToDirectory(File srcFile,
                                       File destDir)
                                throws IOException
Copies a file to a directory preserving the file date.
This method copies the contents of the specified source file to a file of the same name in the specified destination directory. The destination directory is created if it does not exist. If the destination file exists, then this method will overwrite it.

Note: This method tries to preserve the file's last modified date/times using File.setLastModified(long), however it is not guaranteed that the operation will succeed. If the modification operation fails, no indication is provided.

Parameters:
srcFile - an existing file to copy, must not be null
destDir - the directory to place the copy in, must not be null
Throws:
NullPointerException - if source or destination is null
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
See Also:
copyFile(File, File, boolean)
copyFileToDirectory
public static void copyFileToDirectory(File sourceFile,
                                       File destinationDir,
                                       boolean preserveFileDate)
                                throws IOException
Copies a file to a directory optionally preserving the file date.
This method copies the contents of the specified source file to a file of the same name in the specified destination directory. The destination directory is created if it does not exist. If the destination file exists, then this method will overwrite it.

Note: Setting preserveFileDate to true tries to preserve the file's last modified date/times using File.setLastModified(long), however it is not guaranteed that the operation will succeed. If the modification operation fails, no indication is provided.

Parameters:
sourceFile - an existing file to copy, must not be null
destinationDir - the directory to place the copy in, must not be null
preserveFileDate - true if the file date of the copy should be the same as the original
Throws:
NullPointerException - if source or destination is null
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
IOException - if the output file length is not the same as the input file length after the copy completes
Since:
1.3
See Also:
copyFile(File, File, boolean)
copyInputStreamToFile
public static void copyInputStreamToFile(InputStream source,
                                         File destination)
                                  throws IOException
Copies bytes from an InputStream source to a file destination. The directories up to destination will be created if they don't already exist. destination will be overwritten if it already exists. The source stream is closed. See copyToFile(InputStream, File) for a method that does not close the input stream.
Parameters:
source - the InputStream to copy bytes from, must not be null, will be closed
destination - the non-directory File to write bytes to (possibly overwriting), must not be null
Throws:
IOException - if destination is a directory
IOException - if destination cannot be written
IOException - if destination needs creating but can't be
IOException - if an IO error occurs during copying
Since:
2.0
copyToDirectory
public static void copyToDirectory(File sourceFile,
                                   File destinationDir)
                            throws IOException
Copies a file or directory to within another directory preserving the file dates.
This method copies the source file or directory, along all its contents, to a directory of the same name in the specified destination directory.

The destination directory is created if it does not exist. If the destination directory did exist, then this method merges the source with the destination, with the source taking precedence.

Note: This method tries to preserve the files' last modified date/times using File.setLastModified(long), however it is not guaranteed that those operations will succeed. If the modification operation fails, no indication is provided.

Parameters:
sourceFile - an existing file or directory to copy, must not be null
destinationDir - the directory to place the copy in, must not be null
Throws:
NullPointerException - if source or destination is null
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
Since:
2.6
See Also:
copyDirectoryToDirectory(File, File), copyFileToDirectory(File, File)
copyToDirectory
public static void copyToDirectory(Iterable<File> sourceIterable,
                                   File destinationDir)
                            throws IOException
Copies a files to a directory preserving each file's date.
This method copies the contents of the specified source files to a file of the same name in the specified destination directory. The destination directory is created if it does not exist. If the destination file exists, then this method will overwrite it.

Note: This method tries to preserve the file's last modified date/times using File.setLastModified(long), however it is not guaranteed that the operation will succeed. If the modification operation fails, no indication is provided.

Parameters:
sourceIterable - a existing files to copy, must not be null
destinationDir - the directory to place the copy in, must not be null
Throws:
NullPointerException - if source or destination is null
IOException - if source or destination is invalid
IOException - if an IO error occurs during copying
Since:
2.6
See Also:
copyFileToDirectory(File, File)
copyToFile
public static void copyToFile(InputStream source,
                              File destination)
                       throws IOException
Copies bytes from an InputStream source to a file destination. The directories up to destination will be created if they don't already exist. destination will be overwritten if it already exists. The source stream is left open, e.g. for use with ZipInputStream. See copyInputStreamToFile(InputStream, File) for a method that closes the input stream.
Parameters:
source - the InputStream to copy bytes from, must not be null
destination - the non-directory File to write bytes to (possibly overwriting), must not be null
Throws:
IOException - if destination is a directory
IOException - if destination cannot be written
IOException - if destination needs creating but can't be
IOException - if an IO error occurs during copying
Since:
2.5
copyURLToFile
public static void copyURLToFile(URL source,
                                 File destination)
                          throws IOException
Copies bytes from the URL source to a file destination. The directories up to destination will be created if they don't already exist. destination will be overwritten if it already exists.
Warning: this method does not set a connection or read timeout and thus might block forever. Use copyURLToFile(URL, File, int, int) with reasonable timeouts to prevent this.

Parameters:
source - the URL to copy bytes from, must not be null
destination - the non-directory File to write bytes to (possibly overwriting), must not be null
Throws:
IOException - if source URL cannot be opened
IOException - if destination is a directory
IOException - if destination cannot be written
IOException - if destination needs creating but can't be
IOException - if an IO error occurs during copying
copyURLToFile
public static void copyURLToFile(URL source,
                                 File destination,
                                 int connectionTimeout,
                                 int readTimeout)
                          throws IOException
Copies bytes from the URL source to a file destination. The directories up to destination will be created if they don't already exist. destination will be overwritten if it already exists.
Parameters:
source - the URL to copy bytes from, must not be null
destination - the non-directory File to write bytes to (possibly overwriting), must not be null
connectionTimeout - the number of milliseconds until this method will timeout if no connection could be established to the source
readTimeout - the number of milliseconds until this method will timeout if no data could be read from the source
Throws:
IOException - if source URL cannot be opened
IOException - if destination is a directory
IOException - if destination cannot be written
IOException - if destination needs creating but can't be
IOException - if an IO error occurs during copying
Since:
2.0
deleteDirectory
public static void deleteDirectory(File directory)
                            throws IOException
Deletes a directory recursively.
Parameters:
directory - directory to delete
Throws:
IOException - in case deletion is unsuccessful
IllegalArgumentException - if directory does not exist or is not a directory